/**
 * Script de test pour l'endpoint Gemini
 * Ce script d√©montre l'utilisation des endpoints Gemini pour la g√©n√©ration et modification de formulaires
 */

import fetch from 'node-fetch'

const BASE_URL = 'http://localhost:3000'
const API_URL = `${BASE_URL}/api`

// Token d'authentification (√† remplacer par un token valide)
const AUTH_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJmMjAyNjM2MC04ZmJiLTExZjAtOTI2My1kZDEyYzA4ZTg4ZmQiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NTg0MTg2ODMsImV4cCI6MTc1OTAyMzQ4M30.Rg8HjzPc7Od2LNvpfVRoF2HIvbFQ_78kIFOxZPDs7bQ'

// Headers pour les requ√™tes
const headers = {
  'Content-Type': 'application/json',
  'Authorization': `Bearer ${AUTH_TOKEN}`
}

/**
 * Test de g√©n√©ration de formulaire
 */
async function testGenerateForm() {
  console.log('üöÄ Test de g√©n√©ration de formulaire...')
  
  const requestData = {
    description: "Je veux cr√©er un formulaire de contact avec nom, email, sujet et message. Le message doit √™tre obligatoire et le formulaire doit avoir un th√®me moderne.",
    options: {
      theme: "modern",
      primaryColor: "#3b82f6",
      includeMarketing: true,
      language: "fr"
    }
  }

  try {
    const response = await fetch(`${API_URL}/gemini/generate`, {
      method: 'POST',
      headers,
      body: JSON.stringify(requestData)
    })

    const result = await response.json()
    
    if (result.success) {
      console.log('‚úÖ Formulaire g√©n√©r√© avec succ√®s!')
      console.log(`üìù Titre: ${result.data.form.title}`)
      console.log(`üìä Nombre d'√©tapes: ${result.data.form.steps.length}`)
      console.log(`üí° Suggestions: ${result.data.suggestions.length}`)
      return result.data.form.id
    } else {
      console.error('‚ùå Erreur lors de la g√©n√©ration:', result.message)
      return null
    }
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
    return null
  }
}

/**
 * Test de modification de formulaire
 */
async function testModifyForm(formId) {
  if (!formId) {
    console.log('‚è≠Ô∏è  Pas de formulaire √† modifier')
    return
  }

  console.log('üîß Test de modification de formulaire...')
  
  const requestData = {
    formId: formId,
    instructions: "Ajouter un champ pour le num√©ro de t√©l√©phone et changer la couleur principale en vert. Ajouter aussi une √©tape pour les informations de l'entreprise.",
    options: {
      preserveData: true,
      language: "fr"
    }
  }

  try {
    const response = await fetch(`${API_URL}/gemini/modify`, {
      method: 'POST',
      headers,
      body: JSON.stringify(requestData)
    })

    const result = await response.json()
    
    if (result.success) {
      console.log('‚úÖ Formulaire modifi√© avec succ√®s!')
      console.log(`üìù Titre: ${result.data.form.title}`)
      console.log(`üìä Nombre d'√©tapes: ${result.data.form.steps.length}`)
      console.log(`üé® Couleur: ${result.data.form.primaryColor}`)
      console.log(`üìã Changements: ${result.data.changes.join(', ')}`)
    } else {
      console.error('‚ùå Erreur lors de la modification:', result.message)
    }
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
  }
}

/**
 * Test d'analyse de formulaire
 */
async function testAnalyzeForm(formId) {
  if (!formId) {
    console.log('‚è≠Ô∏è  Pas de formulaire √† analyser')
    return
  }

  console.log('üîç Test d\'analyse de formulaire...')
  
  const requestData = {
    formId: formId,
    analysisType: "comprehensive"
  }

  try {
    const response = await fetch(`${API_URL}/gemini/analyze`, {
      method: 'POST',
      headers,
      body: JSON.stringify(requestData)
    })

    const result = await response.json()
    
    if (result.success) {
      console.log('‚úÖ Analyse termin√©e avec succ√®s!')
      console.log(`üìä Accessibilit√©: ${result.data.analysis.accessibility}`)
      console.log(`üé® UX: ${result.data.analysis.ux}`)
      console.log(`üìà Conversion: ${result.data.analysis.conversion}`)
      console.log(`üîç SEO: ${result.data.analysis.seo}`)
      console.log(`üí° Recommandations: ${result.data.recommendations.length}`)
    } else {
      console.error('‚ùå Erreur lors de l\'analyse:', result.message)
    }
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
  }
}

/**
 * Test de sant√© du service Gemini
 */
async function testGeminiHealth() {
  console.log('üè• Test de sant√© du service Gemini...')
  
  try {
    const response = await fetch(`${API_URL}/gemini/health`, {
      method: 'GET',
      headers
    })

    const result = await response.json()
    
    if (result.success) {
      console.log('‚úÖ Service Gemini op√©rationnel!')
      console.log(`üìä Statut: ${result.status}`)
      console.log(`‚è∞ Timestamp: ${result.timestamp}`)
    } else {
      console.error('‚ùå Service Gemini indisponible:', result.message)
    }
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
  }
}

/**
 * Test de g√©n√©ration de formulaire d'inscription √©v√©nement
 */
async function testGenerateEventForm() {
  console.log('üéâ Test de g√©n√©ration de formulaire d\'√©v√©nement...')
  
  const requestData = {
    description: "Cr√©er un formulaire d'inscription pour un √©v√©nement avec nom, pr√©nom, email, t√©l√©phone, choix du repas (v√©g√©tarien/normal), allergies, et acceptation des conditions. Le formulaire doit √™tre √©l√©gant et professionnel.",
    options: {
      theme: "elegant",
      primaryColor: "#8b5cf6",
      includeMarketing: true,
      language: "fr"
    }
  }

  try {
    const response = await fetch(`${API_URL}/gemini/generate`, {
      method: 'POST',
      headers,
      body: JSON.stringify(requestData)
    })

    const result = await response.json()
    
    if (result.success) {
      console.log('‚úÖ Formulaire d\'√©v√©nement g√©n√©r√© avec succ√®s!')
      console.log(`üìù Titre: ${result.data.form.title}`)
      console.log(`üìä Nombre d'√©tapes: ${result.data.form.steps.length}`)
      console.log(`üé® Th√®me: ${result.data.form.theme}`)
      console.log(`üé® Couleur: ${result.data.form.primaryColor}`)
      
      // Afficher les champs g√©n√©r√©s
      result.data.form.steps.forEach((step, index) => {
        console.log(`\nüìã √âtape ${index + 1}: ${step.title}`)
        step.fields.forEach((field, fieldIndex) => {
          console.log(`  - ${field.label} (${field.type}) ${field.required ? '‚úì' : ''}`)
        })
      })
      
      return result.data.form.id
    } else {
      console.error('‚ùå Erreur lors de la g√©n√©ration:', result.message)
      return null
    }
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
    return null
  }
}

/**
 * Fonction principale de test
 */
async function runTests() {
  console.log('üß™ D√©marrage des tests Gemini...\n')
  
  // Test de sant√©
  await testGeminiHealth()
  console.log('\n' + '='.repeat(50) + '\n')
  
  // Test de g√©n√©ration de formulaire de contact
  const contactFormId = await testGenerateForm()
  console.log('\n' + '='.repeat(50) + '\n')
  
  // Test de modification
  await testModifyForm(contactFormId)
  console.log('\n' + '='.repeat(50) + '\n')
  
  // Test d'analyse
  await testAnalyzeForm(contactFormId)
  console.log('\n' + '='.repeat(50) + '\n')
  
  // Test de g√©n√©ration de formulaire d'√©v√©nement
  const eventFormId = await testGenerateEventForm()
  console.log('\n' + '='.repeat(50) + '\n')
  
  // Test d'analyse du formulaire d'√©v√©nement
  await testAnalyzeForm(eventFormId)
  
  console.log('\nüéâ Tests termin√©s!')
}

/**
 * Instructions d'utilisation
 */
function printInstructions() {
  console.log(`
üìö Instructions d'utilisation du test Gemini:

1. Assurez-vous que le serveur est d√©marr√©:
   npm start

2. Obtenez un token d'authentification valide:
   - Connectez-vous via POST /api/auth/login
   - Copiez le token de la r√©ponse

3. Remplacez 'your_jwt_token_here' dans ce fichier par votre token

4. Ex√©cutez le test:
   node test-gemini.js

5. V√©rifiez que GEMINI_API_KEY est configur√© dans votre .env

üîß Configuration requise:
- GEMINI_API_KEY=your_gemini_api_key_here
- Serveur en cours d'ex√©cution sur le port 3000
- Token JWT valide

üìñ Documentation API: http://localhost:3000/api-docs
`)
}

// V√©rifier si le script est ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  if (AUTH_TOKEN === 'your_jwt_token_here') {
    printInstructions()
  } else {
    runTests().catch(console.error)
  }
}

export {
  testGenerateForm,
  testModifyForm,
  testAnalyzeForm,
  testGeminiHealth,
  testGenerateEventForm,
  runTests
}
